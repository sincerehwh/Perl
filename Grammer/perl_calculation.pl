
#!usr/bin/perl


# 算术运算符 + - * / **

# 比较运算符 == != <=> > < >= <= 
$a = 1;
$b = 2;
$c = ($a <=> $b);
print "$c";

# 逻辑运算符 

	#lt 检查左边的字符串是否小于右边的字符串，如果是返回 true，否则返回 false。	($a lt $b) 返回 true。
	#gt 检查左边的字符串是否大于右边的字符串，如果是返回 true，否则返回 false。	($a gt $b) 返回 false。
	#le 检查左边的字符串是否小于或等于右边的字符串，如果是返回 true，否则返回 false。	($a le $b) 返回 true
	#ge 检查左边的字符串是否大于或等于右边的字符串，如果是返回 true，否则返回 false。	($a ge $b) 返回 false。
	#eq 检查左边的字符串是否等于右边的字符串，如果是返回 true，否则返回 false。	($a eq $b) 返回 false。
	#ne 检查左边的字符串是否不等于右边的字符串，如果是返回 true，否则返回 false。	($a ne $b) 返回 true
	#cmp 如果左边的字符串大于右边的字符串返回 1，如果相等返回 0，如果左边的字符串小于右边的字符串返回 -1。	($a cmp $b) 返回 -1。


# 赋值运算符

	# =	    简单的赋值运算符，把右边操作数的值赋给左边操作数	$c = $a + $b 将把 $a + $b 的值赋给 $c
	# +=	加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数	$c += $a 相等于 $c = $c + $a
	# -=	减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数	$c -= $a 相等于 $c = $c - $a
	# *=	乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数	$c *= $a 相等于 $c = $c * $a
	# /=	除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数	$c /= $a 相等于 $c = $c / $a
	# %=	求模且赋值运算符，求两个操作数的模赋值给左边操作数	$c %= $a 相等于 $c = $c % a
	# **=	乘幂且赋值运算符，求两个操作数的乘幂赋值给左边操作数

# 位运算符

	# &	如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。	($a & $b) 将得到 12，二进制为 0000 1100
	# |	如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。	($a | $b) 将得到 61 ，二进制为 0011 1101
	# ^	如果存在于其中一个操作数中但不同时存在于两个操作数中，二进制异或运算符复制一位到结果中。	($a ^ $b) 将得到 49，二进制为 0011 0001
	# ~	二进制补码运算符是一元运算符，具有"翻转"位效果，即0变成1，1变成0。	(~$a ) 将得到 -61 ，二进制为 1100 0011 ，一个有符号二进制数的补码形式。
	# <<	二进制左移运算符。左操作数的值向左移动右操作数指定的位数。	$a << 2 将得到 240 ，二进制为 1111 0000
	# >>	二进制右移运算符。左操作数的值向右移动右操作数指定的位数。	$a >> 2 将得到 15 ，二进制为 0000 1111

# 逻辑运算符

	# and	逻辑与运算符符。如果两个操作数都为 true，则条件为 true。	($a and $b) 为 false。
	# &&	C 风格的逻辑与运算符符。如果两个操作数都为 true，则条件为 true	($a && $b) 为 false。
	# or	逻辑或运算符。如果两个操作数中有任意一个非零，则条件为 true。	($a or $b) 为 true。
	# ||	C 风格逻辑或运算符。如果两个操作数中有任意一个非零，则条件为 true。	($a || $b) 为 true。
	# not	逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 true，则逻辑非运算符将使其为 false。

# 引号运算符

	# q{ }	为字符串添加单引号	q{abcd} 结果为 'abcd'
	# qq{ }	为字符串添加双引号	qq{abcd} 结果为 "abcd"
	# qx{ }	为字符串添加反引号	qx{abcd} 结果为 `abcd`

# 其他运算符
	
	$a = 10;
 
	$b = q{a = $a};
	print "q{a = \$a} = $b\n";
	 
	$b = qq{a = $a};
	print "qq{a = \$a} = $b\n";
	 
	# 使用 unix 的 date 命令执行
	$t = qx{date};
	print "qx{date} = $t\n";
	
	# .	点号 (.) 用于连接两个字符串。	如果 $a="run", $b="oob" ， $a.$b 结果为 "runoob"
	# x	x 运算符返回字符串重复的次数。	('-' x 3) 输出为 ---。
	# ..	.. 为范围运算符。	(2..5) 输出结果为 (2, 3, 4, 5)
	# ++	自增运算符，整数值增加 1	$a =10, $a++ will 输出为 11
	# --	自减运算符，整数值减少 1	$a =10, $a-- 输出为 9
	# ->	箭号用于指定一个类的方法	$obj->$a 表示对象 $obj 的 $a 方法。
	

# 	运算符优先级

	# 下表列出了 Perl 语言的运算符优先级：
	# 运算符符	结合性

	# ++, --		无
	# -, ~, !		从右到左
	# **			从右到左
	# =~, !~		从左到右
	# *, /, %, x	从左到右
	# +, -, .		从左到右
	# <<, >>		从左到右
	# -e, -r,		无
	# <, <=, >, >=, lt, le, gt, ge	从左到右
	# ==, !=, <=>, eq, ne, cmp	从左到右
	# &		从左到右
	# |, ^	从左到右
	# &&	从左到右
	# ||	从左到右
	# ..	从左到右

	# ? and :			从右到左
	# =, +=, -=, *=,	从右到左
	# 其他
	# ,		从左到右
	# not	从左到右
	# and	从左到右
	# or, xor	从左到右

$a = 20;
$b = 10;
$c = 15;
$d = 5;
$e;
 
print "\$a  = $a, \$b = $b, \$c = $c ，\$d = $d\n";
 
$e = ($a + $b) * $c / $d;
print "(\$a + \$b) * \$c / \$d  = $e\n";
 
$e = (($a + $b) * $c )/ $d;
print "((\$a + \$b) * \$c) / \$d  = $e\n";
 
$e = ($a + $b) * ($c / $d);
print "(\$a + \$b) * (\$c / \$d )  = $e\n";
 
$e = $a + ($b * $c ) / $d;
print "\$a + (\$b * \$c )/ \$d  = $e\n";

